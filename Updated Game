
//global variables
var currentScene=0;
var time=0;

//Button Class
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    fill(224, 133, 36);
    rect(this.x, this.y, this.width, this.height, 14);
    fill(255, 255, 255);
    textSize(41);
    textAlign(LEFT, TOP);
    text(this.label, this.x+37,this.y+this.height/15);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};


var start = new Button({
    x: 430,
    y: 507,
    label: "start!",
    onClick: function() {
        currentScene=1;
        time = millis();
        
    }
});

//Tile Class
var Tile = function(x, y, face, question, options, points) {
    this.x = x;
    this.y = y;
    this.size = 159;
    this.face = face;
    this.isFaceUp = false;
    this.question = question;
    this.options = options;
    this.points = points; 
};
Tile.prototype.draw = function() {
    fill(0, 51, 255);
    strokeWeight(2);
    rect(this.x, this.y, this.size, this.size, 5);
    if (this.isFaceUp) {
        fill(255, 255, 255);
        textSize(14);
        text(this.question, 82 + this.x + this.size / 5, this.y + this.size / 11);
        textSize(19);
        for (var i = 0; i < this.options.length; i++) {
            text(this.options[i], 41 + this.x + this.size / 10, 38 + this.y + this.size / 17 + (i + 1) * 23);
        }
    } else {
        // Display the points
        fill(255, 255, 255);
        textSize(50);
        textAlign(CENTER, CENTER);
        text(this.points, this.x + this.size / 2, this.y + this.size / 2);
    }
};
Tile.prototype.isUnderMouse = function(x, y) {
  return x >= this.x && x <= (this.x + this.size) &&
         y >= this.y && y <= (this.y + this.size);
};
// Global config
var NUM_COLS = 3;
var NUM_ROWS = 3;

// Declare an array of all possible faces
var questions = [
    {
category: "Movies",
points: 100,
question: "What does Hahnna  Matata' mean?",
options: ["Less stress", "No worries", "Stress", "Be calm"],
answer: "No worries"
},
{
category: "TV Show",
points: 100,
question: "How many Ross kids are there?",
options: ["3", "4", "2", "5"],
answer: "4"
},
{
category: "Character",
points: 100,
question: "What was Raven Symone's super power?",
options: ["Flying", "Reading minds", "Visions", "Strength"],
answer: "Visions"
},
{
category: "Movies",
points: 200,
question: "In 'Lemonade Mouth,' how did the group meet?",
options: ["P.E. class", "Church", "Detention", "Auditions"],
answer: "Detention"
},
{
category: "TV Show",
points: 200,
question: "In 'Wizards of Waverly Place,' who won the wizard competition?",
options: ["Alex", "Justin", "Max", "Harper"],
answer: "Alex"
},
{
category: "Character",
points: 200,
question: "How many Disney princesses are there?",
options: ["30", "20", "15", "12"],
answer: "12"
},
{
category: "Movies",
points: 300,
question: "How many siblings does Prince Hans of the Southern Isles have in 'Frozen'?",
options: ["12", "13", "10", "15"],
answer: "12"
},
{
category: "TV Show",
points: 300,
question: "Who was Hannah Montana's first boyfriend?",
options: ["Jake", "Jesse", "Derek", "Rioc"],
answer: "Jake"
},
{
category: "Character",
points: 300,
question: "Who is Disney's most famous mascot?",
options: ["Donald Duck", "Minnie Mouse", "Mickey Mouse", "Goofy"],
answer: "Mickey Mouse"
},


];
var catergory = function() {
  fill(0, 51, 255);
rect(84,67,154,44);
rect(253,67,153,44);
rect(421,67,155,44);
    fill(255, 255, 255);
    textSize(26);
    text("Movies",160,87);
    text("Tv shows",331,87);
    text("Characters",495,87);
};

var tiles = [];
for (var i = 0; i < NUM_COLS; i++) {
    for (var j = 0; j < NUM_ROWS; j++) {
        var tileX = i * 169 + 80;
        var tileY = j * 162 + 115;
        var questionIndex = j * NUM_COLS + i;
        if (questionIndex < questions.length) {
            tiles.push(new Tile(tileX, tileY, null, questions[questionIndex].question, questions[questionIndex].options, questions[questionIndex].points));
        } else {
            tiles.push(new Tile(tileX, tileY, null));
        }
    }
}

background(255, 255, 255);

var numTries = 0;
var flippedTiles = [];
var delayStartFC = null;
var selectedTile = null;
var playerAnswer = null;

mouseClicked = function() {
    if (currentScene === 0) {
        start.handleMouseClick();
    } else {
        if (delayStartFC !== null && frameCount - delayStartFC < 30) {
            // ignore clicks during delay period
            return;
        }
        if (selectedTile === null) {
            for (var i = 0; i < tiles.length; i++) {
                var tile = tiles[i];
                if (tile.isUnderMouse(mouseX, mouseY)) {
                    if (!tile.isFaceUp) {
                        tile.isFaceUp = true;
                        selectedTile = tile;
                    }
                    break;
                }
            }
        } else {
            for (var i = 0; i < selectedTile.options.length; i++) {
                if (mouseX >= selectedTile.x + 13 && mouseX <= selectedTile.x + 13 + textWidth(selectedTile.options[i]) &&
                    mouseY >= selectedTile.y + 38 + (i + 1) * 23 && mouseY <= selectedTile.y + 38 + (i + 1) * 23 + 12) {
                    playerAnswer = selectedTile.options[i];
                    if (playerAnswer === questions[tiles.indexOf(selectedTile)].answer) {
                        selectedTile.points *= 1;
                        // Reset the tile points after displaying it
                        selectedTile.points = abs(selectedTile.points);
                    } else {
                        selectedTile.points *= -1;
                    }
                    selectedTile.isFaceUp = false;
                    selectedTile = null;
                    break;
                }
            }
        }
    }
};
var drawGlobe = function() {
    var globeX = 311;
    var globeY = 200;
    fill(53, 53, 181);
    ellipse(globeX, globeY, 244, 234);
    fill(235, 143, 44);
    rect(globeX + 70, globeY - 48, 10, 10);
    rect(globeX + 52, globeY - 48, 10, 10);
    rect(globeX + 37, globeY - 48, 10, 10);
    rect(globeX - 37, globeY - 48, 10, 10);
    rect(globeX - 56, globeY - 48, 10, 10);
    rect(globeX - 76, globeY - 48, 10, 10);
    rect(globeX - 41, globeY - 32, 10, 10);
    rect(globeX - 61, globeY - 33, 10, 10);
    rect(globeX - 42, globeY - 17, 10, 10);
    rect(globeX + 68, globeY - 28, 10, 10);
    rect(globeX + 83, globeY - 16, 10, 10);
    rect(globeX - 36, globeY - 35, 10, 10);
    rect(globeX - 37, globeY - 17, 10, 10);
    rect(globeX - 24, globeY - 10, 10, 10);
    rect(globeX + 54, globeY + 73, 10, 10);
    rect(globeX + 72, globeY + 73, 10, 10);
    rect(globeX + 66, globeY + 53, 10, 10);
    rect(globeX + 81, globeY + 52, 10, 10);
};


var splashScreen = function(){
currentScene=0;
background(46, 46, 158);
fill(255, 255, 255);
textSize(20);
text("Ndoumbe and Milan's Game",169,30);
drawGlobe();
fill(255, 255, 255);
textSize(50);
text("JEOPARDY",181,186);
 start.draw();
};
var pauseScreen = function(){
    background(24, 0, 204);
    textSize(50);
    text("PAUSED", 200, 40);
};

var playGame = function(){
    currentScene=1;
    background(46, 46, 158);
    rect(0,0,615,40);
    fill(0, 0, 0);
    textSize(15);
    var seconds =  round((millis()- time)/1000);
    text("Time : "+ seconds, 48,10);

    var score = 0;
    for (var i = 0; i < tiles.length; i++) {
        tiles[i].draw();
        if (tiles[i].isMatch) {
            score += tiles[i].points;
        }
    }
    fill(0, 0, 0);
    textSize(15);
    text("Score: " + score, 162, 10);

    catergory();

    if (flippedTiles.length === 1) {
        for (var i = 0; i < flippedTiles[0].options.length; i++) {
            if (mouseX > flippedTiles[0].x + 13 + flippedTiles[0].size / 5 &&
                mouseX < flippedTiles[0].x + 13 + flippedTiles[0].size / 5 + textWidth(flippedTiles[0].options[i]) &&
                mouseY > flippedTiles[0].y + 38 + flippedTiles[0].size / 11 + i * 23 &&
                mouseY < flippedTiles[0].y + 38 + flippedTiles[0].size / 11 + i * 23 + 12) {
                if (flippedTiles[0].options[i] === questions[flippedTiles[0].index].answer) {
                    score += flippedTiles[0].points;
                } else {
                    score -= flippedTiles[0].points;
                }
                flippedTiles[0].isMatch = true;
                flippedTiles[0].isFaceUp = false;
                flippedTiles.length = 0;
                break;
            }
        }
    }
};

//draw function to call different screens
draw = function() {
    if(currentScene===0){splashScreen();}
    else if(currentScene===1){playGame();}
   
};

noLoop();
