
//global variables
// Global config
var NUM_COLS = 4;
var NUM_ROWS = 4;
var currentScene = 0;
var time=0;
var score = 0;
var flippedTiles = [];

/*** Ndoumbe's Bitmoji ***/
  var drawEmoji = function(xPos,yPos,emojiHeight) {
  noStroke();
  fill(66, 45, 9); //skin color
  ellipse(xPos+96*emojiHeight/150, yPos+39*emojiHeight/150, emojiHeight/150*164, emojiHeight/150*187); //head size 
  fill(0, 0, 0); //hair color
 ellipse(xPos+29*emojiHeight/85, yPos+-46*emojiHeight/150, emojiHeight/150*174,emojiHeight/119* 87); //hair
ellipse(xPos-23*emojiHeight/150,yPos+45*emojiHeight/150, emojiHeight/153* 117, emojiHeight/150*127); //hair
ellipse(xPos+-5+emojiHeight/150, yPos+124*emojiHeight/150, emojiHeight/150* 104, emojiHeight/150*99); //hair
ellipse(xPos+40*emojiHeight/150, yPos+153*emojiHeight/150, emojiHeight/150*100,emojiHeight/124* 72); //hair
ellipse(xPos+178*emojiHeight/150, yPos+145*emojiHeight/150, emojiHeight/150*120, emojiHeight/150*110); //hair
ellipse(xPos+190*emojiHeight/131, yPos+42*emojiHeight/150, emojiHeight/150*119,emojiHeight/150* 135); //hair
ellipse(xPos+153*emojiHeight/141, yPos-45*emojiHeight/150, emojiHeight/150*136, emojiHeight/174*112); //hair

  fill(66, 45, 9); //skin color for neck
  rect(xPos+ 73*emojiHeight/150, yPos+ 103*emojiHeight/150,emojiHeight/150*48,emojiHeight/150* 39);

  fill(163, 0, 0); //para color
  ellipse(xPos+ 126*emojiHeight/150, yPos-95*emojiHeight/150,emojiHeight/150* 15,emojiHeight/150* 10); //para dot

  ellipse(xPos+ 109*emojiHeight/150, yPos-69*emojiHeight/150, emojiHeight/150*110, emojiHeight/150*35); //para
  fill(250, 242, 242); //color for eyeball
  ellipse(xPos+ 63*emojiHeight/150, yPos+ 22*emojiHeight/150, emojiHeight/150*42,emojiHeight/150* 16); //left eye ball
  ellipse(xPos+130*emojiHeight/150, yPos+ 21*emojiHeight/150, emojiHeight/150*42, emojiHeight/150*16); //righteye ball

  fill(0, 0, 0); // pupel
  ellipse(xPos+ 63*emojiHeight/150, yPos+ 23*emojiHeight/150 ,emojiHeight/150* 10, emojiHeight/150*10); // left eye pupel
  ellipse(xPos+ 130*emojiHeight/150, yPos+ 22*emojiHeight/150, emojiHeight/150*10,emojiHeight/150* 10); //right eye pupel
    
  fill(235, 119, 30); //SHIRT COLOR
  ellipse(xPos+ 97*emojiHeight/150, yPos+ 232*emojiHeight/150, emojiHeight/150*154, emojiHeight/150* 200); //SHIRT
  ellipse(xPos+29*emojiHeight/150, yPos+ 208*emojiHeight/150,emojiHeight/150* 56, emojiHeight/150*83);
  ellipse(xPos+169*emojiHeight/150, yPos+ 208*emojiHeight/150, emojiHeight/150*56, emojiHeight/150*83);

  fill(0, 0, 0); //eyebrow color
  rect(xPos+ 43*emojiHeight/150, yPos+3*emojiHeight/150, emojiHeight/150*37, emojiHeight/150*3, emojiHeight/150*26); //left eyebrow
  rect(xPos+ 109*emojiHeight/150, yPos+3*emojiHeight/150, emojiHeight/150*37, emojiHeight/150*3, emojiHeight/150*26); //right eyebrow
  rect(xPos+ 101*emojiHeight/150, yPos+19*emojiHeight/150, emojiHeight/150*2, emojiHeight/150*35);
  rect(xPos+ 78*emojiHeight/150, yPos+51*emojiHeight/150,emojiHeight/150* 25, emojiHeight/150*2); //nose
    fill(255, 255, 255);//teeth color
    ellipse(xPos+101*emojiHeight/154,yPos+81*emojiHeight/150,emojiHeight/149*65, emojiHeight/327*30);//teeth
};

/*** Milan's Bitmoji ***/
var drawBitmoji = function (x, y, bitSize) {
    //Neck
    noStroke();
    fill(198, 134, 66);
    rect(x + (bitSize/100*190), y + (bitSize/100*178), (bitSize/100*20), (bitSize/100*50));
    
    //Head
    stroke(0, 0, 0);
    strokeWeight(0.25);
    fill(198, 134, 66);//Skin Color
    arc(x + (bitSize/100*200),y + (bitSize/100*160), (bitSize/100*43), (bitSize/100*80), 0, 180);
    
    //Hair
    noStroke();
    fill(0, 0, 0);//Black Hair
    bezier(x + (bitSize/100*223), y + (bitSize/100*161), x + (bitSize/100*245), y + (bitSize/100*147), x + (bitSize/100*178), y + (bitSize/100*118), x + (bitSize/100*178), y + (bitSize/100*161));//Top
    rect(x + (bitSize/100*178), y + (bitSize/100*160), (bitSize/100*3), (bitSize/100*10));//Left
    rect(x + (bitSize/100*219), y + (bitSize/100*160), (bitSize/100*3), (bitSize/100*10));//Right
    
    //Eyebrows
    noFill();
    stroke(0, 0, 0);
    arc(x + (bitSize/100*190), y + (bitSize/100*172), (bitSize/100*10), (bitSize/100*5), -180, 0);
    arc(x + (bitSize/100*210), y + (bitSize/100*172), (bitSize/100*10), (bitSize/100*5), -180, 0);
    
    // Glasses
    stroke(197, 201, 201);//Transparent Frame
    strokeWeight(2);
    line(x + (bitSize/100*180), y + (bitSize/100*168), x + (bitSize/100*219), y + (bitSize/100*168));
    noFill();
    quad(x+(bitSize/100*181), y+(bitSize/100*168), x+(bitSize/100*198), y+(bitSize/100*168), x+(bitSize/100*196), y+(bitSize/100*180), x+(bitSize/100*183), y+(bitSize/100*180));//Left Lense
    quad(x+(bitSize/100*201), y+(bitSize/100*168), x+(bitSize/100*219), y+(bitSize/100*168), x+(bitSize/100*217), y+(bitSize/100*180), x+(bitSize/100*204), y+(bitSize/100*180));//Right Lense
    
    //Eyes
    stroke(0, 0, 0);
    strokeWeight(0.5);
    fill(255,255,255);//White
    ellipse(x + (bitSize/100*190), y + (bitSize/100*174), (bitSize/100*9), (bitSize/100*6));
    ellipse(x + (bitSize/100*210), y + (bitSize/100*174), (bitSize/100*9), (bitSize/100*6));
    fill(0, 0, 0);//Black eyes
    ellipse(x + (bitSize/100*191), y + (bitSize/100*174.5), (bitSize/100*2.8), (bitSize/100*2.8));//Left
    ellipse(x + (bitSize/100*211), y + (bitSize/100*174.5), (bitSize/100*2.8), (bitSize/100*2.8));//Right
    
    //Nose
    stroke(120, 83, 41);
    strokeWeight(1);
    fill(198, 134, 66);
    bezier(x + (bitSize/100*199), y + (bitSize/100*183), x + (bitSize/100*192), y + (bitSize/100*182), x + (bitSize/100*213), y + (bitSize/100*196), x + (bitSize/100*200), y + (bitSize/100*175));
    
    //Mouth
    stroke(0, 0, 0);
    fill(255, 255, 255);
    arc(x + (bitSize/100*200), y + (bitSize/100*190), (bitSize/100*16), (bitSize/100*10), 0, 210);
    
    //Shirt
    noStroke();
    fill(255, 232, 252);
    rect(x + (bitSize/100*175), y + (bitSize/100*207), (bitSize/100*50), (bitSize/100*70));
    fill(171, 123, 165);
    var dis = 212;
    while (dis < 275) {
        ellipse(x + (bitSize/100*200), y + (bitSize/100*dis), (bitSize/100*3), (bitSize/100*3));
        dis += 11;
    }
    
    //Blazer
    fill(0, 0, 0);
    rect(x + (bitSize/100*175), y + (bitSize/100*207), (bitSize/100*15), (bitSize/100*70));
    rect(x + (bitSize/100*210), y + (bitSize/100*207), (bitSize/100*15), (bitSize/100*70));
    triangle(x + (bitSize/100*188), y + (bitSize/100*207), x + (bitSize/100*158), y + (bitSize/100*207), x + (bitSize/100*180), y + (bitSize/100*192));
    triangle(x + (bitSize/100*218), y + (bitSize/100*207), x + (bitSize/100*243), y + (bitSize/100*207), x + (bitSize/100*220), y + (bitSize/100*192));
    quad(x+(bitSize/100*158), y+(bitSize/100*207), x+(bitSize/100*181), y+(bitSize/100*200), x+(bitSize/100*163), y+(bitSize/100*276), x+(bitSize/100*145), y+(bitSize/100*275));//Left-Sleeve
    quad(x+(bitSize/100*243), y+(bitSize/100*207), x+(bitSize/100*220), y+(bitSize/100*200), x+(bitSize/100*236), y+(bitSize/100*276), x+(bitSize/100*255), y+(bitSize/100*275));//Right-Sleeve
    
    //Collar
    stroke(0, 0, 0);
    fill(255, 232, 252);
    strokeWeight(0.25);
    triangle(x + (bitSize/100*183), y + (bitSize/100*211) ,x + (bitSize/100*200), y + (bitSize/100*207), x + (bitSize/100*180), y + (bitSize/100*192));
    triangle(x + (bitSize/100*217), y + (bitSize/100*212), x + (bitSize/100*200), y + (bitSize/100*207), x + (bitSize/100*220), y + (bitSize/100*192));
};





/*** Button Class
 * From Khan Acedemy
 * With some modifcations
***/
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
    this.labelX = config.labelX || 0;
    this.labelY = config.labelY || 0;
    this.color = config.color || color(224, 133, 36);
};

// Draw function for button
Button.prototype.draw = function() {
    fill(this.color);
    rect(this.x, this.y, this.width, this.height, 14);
    fill(255, 255, 255);
    textSize(41);
    textAlign(CENTER, CENTER);
    text(this.label, this.labelX, this.labelY);
};

//Check if mouse is inside button
Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

//Runs this code if Mouse inside button and clicked
Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};
/*** End Button Class ***/

/*** Start Button ***/
var start = new Button({
    x: 230,
    y: 380,
    label: "start!",
    labelX: 300,
    labelY: 402,
    onClick: function() {
        currentScene=1;
        time = millis();
        
    }
});

/*** COntinue Button ***/
var cont = new Button({
    x: 200,
    y: 450,
    width: 200,
    label: "continue",
    labelX: 300,
    labelY: 472,
    onClick: function() {
        currentScene = 1;
    }
});

/*** Home Button ***/
var home = new Button({
    x: 150, 
    y: 263,
    label: "Return Home",
    width: 300,
    labelX: 300,
    labelY: 288,
    color: color(0, 77, 255),
    onClick: function() {
        currentScene = 0;
    }
});

/*** Tile Class
 * Inspired by matching game assignment
***/
var Tile = function(x, y, question) {
    this.x = x;
    this.y = y;
    this.size = 121;
    this.tileOpened = false;
    this.question = question;
    this.color = color(0, 51, 255);
};

//Draw function for tile
Tile.prototype.draw = function() {
    fill(this.color);
    strokeWeight(2);
    rect(this.x, this.y, this.size, this.size, 5);
    if (this.tileOpened) {
        this.color = color(92, 170, 242);
    } else {
    fill(255, 255, 255);
    textSize(40);
    textAlign(CENTER, CENTER);
    text(this.question.points, this.x + this.size / 2, this.y + this.size / 2);
    }
};

//Check if mouse is inside tile
Tile.prototype.isMouseWithin = function(x, y) {
    return x >= this.x && x <= this.x + this.size &&
        y >= this.y && y <= this.y + this.size;
};

//Changes color of tile when mouse passes over
Tile.prototype.mouseHover = function() {
    if (this.isMouseWithin(mouseX, mouseY)) {
        this.color = color(0, 132, 255);
    }
    else {
        this.color = color(0, 51, 255);
    }
};
/*** End Tile Class ***/


/*** QUESTIONS 
 * Sources cited in github
***/
var questions = [ 
    // History 
    { 
        category: "History", 
        points: 100, 
        question: "Disney's most famous mascot", 
        options: ["Donald Duck", "Minnie Mouse", "Mickey Mouse", "Goofy"], 
        answer: "Mickey Mouse" 
    },
    { 
        category: "History", 
        points: 200, 
        question: "The number of film studios Disney owns", 
        options: ["Seven", "Two", "Five", "Eight"], 
        answer: "Eight"
    },
    {
        category: "History", 
        points: 300, 
        question: "The orginal name of the Walt Disney Company", 
        options: ["Disney Production", "The Walt Disney Studio", "Disney Brothers Cartoon Sudio", "Walt Disney Animation"], 
        answer: "Disney Brothers Cartoon Studio"
    }, 
    {
        category: "History",
        points: 400, 
        question: "This year is when Walt Disney was born",
        options: ["1890", "1901", "1897", "1903"], 
        answer: "1901"
    }, 
    {
        category: "Movies",
        points: 100,
        question: "Also know as 'Hakuna Matata'",
        options: ["Less Stress", "No Worries", "Stress", "Be Calm"],
        answer: "No Worries"
    }, 
    {
        category: "Movies",
        points: 200, 
        question: "This is how the group met in Lemonade Mouth",
        options: ["P.E. Class", "Church", "Detention", "Auditions"],
        answer: "Detention"
    },
    {
        category: "Movies", 
        points: 300, 
        question: "Prince Hans of the Southern Isles has this many sibilings in 'Frozen'", 
        options: ["12", "13", "10", "15"],
        answer: "12"
    }, 
    {
        category: "Movies", 
        points: 400, 
        question: "Is the name of Mitchie's Mother in Camp-Rock", 
        options: ["Bonnie", "Connie", "Betty", "Micheal"],
        answer: "Bonnie"
    },
    {
        category: "TV Shows",
        points: 100, 
        question: "There are this many Ross Kids", 
        options: ["3", "4", "2", "5"],
        answer: "4"
    },
    {
        category: "TV Shows", 
        points: 200,
        question: "This person won the wizard competition in Wizards of Waverly Place", 
        options: ["Alex", "Justin", "Max", "Harper"],
        answer: "Alex"
    },
    {
        category: "TV Shows",
        points: 300, 
        question: "This was Hannah Montana's first boyfriend", 
        options: ["Alex", "Justin", "Max", "Harper"],
        answer: "Alex"
    },
    {
        category: "TV Shows",
        points: 400, 
        question: "This was the inspiration for Bills cypher in Gravity Falls",
        options: ["The Pyramids", "The Triangle on the American Dollar", "A Baby Educational Block", "A Billboard for a Psychic"],
        answer: "The Triangle on the American Dollar"
    }, 
    {
        category: "Character", 
        points: 100, 
        question: "This is Raven Simons super power",
        options: ["Flying", "Reading Minds", "Vision", "Strength"], 
        answer: "Vision"
    }, 
    {
        category: "Character", 
        points: 200, 
        question: "This is how many Disney Princesses there are", 
        options: ["30", "20", "15", "12"],
        answer: "12"
    }, 
    {
        category: "Character",
        points: 300, 
        question: "This was the only Disney Princess based on a real person",
        options: ["Mulan", "Moana", "Pocahontas", "Jasmine"],
        answer: "Pocahontas"
    },
    {
        category: "Character", 
        points: 400, 
        question: "This was the year in which Mickey Mouse was created",
        options: ["1930", "1941", "1932", "1928"],
        answer: "1928"
    }
    
];

//Function for putting up Categories at top of screen
var categories = function() {
    fill(0, 37, 186);
    rect(42,67,119,44);
    rect(174,67,119,44);
    rect(305,67,119,44);
    rect(437,67,119,44);
    fill(255, 255, 255);
    textSize(20);
    text ("History",103,89);
    text("Movies",234,89);
    text("TV shows",366,89);
    text("Characters",496,89);
};

// Create the tiles
var tiles = [];
// Variable k is used to keep track of the questions linked to each tile
var k = 0;
for (var i = 0; i < NUM_COLS; i++) {
    for (var j = 0; j < NUM_ROWS; j++) {
        var tileX = i * 132 + 40;
        var tileY = j * 123 + 115;
        
        tiles.push(new Tile(tileX, tileY, questions[k]));
        k++;
    }
}



/*** Function for Splash Screen ***/
var splashScreen = function(){
currentScene=0;
flippedTiles = [];

background(46, 46, 158);
drawEmoji(60, 100, 50);
drawBitmoji(325, -54, 100);
var drawGlobe= function() {
    fill(53, 53, 181);
    ellipse(311,200,244,234);
    fill(235, 143, 44);
    rect(381,152,10,10);
    rect(363,152,10,10);
    rect(348,152,10,10);
    rect(256,152,10,10);
    rect(237,152,10,10);
    rect(217,152,10,10);
    rect(252,168,10,10);
    rect(232,167,10,10);
    rect(251,183,10,10);
    rect(380,172,10,10);
    rect(395,184,10,10);
    rect(272,165,10,10);
    rect(271,183,10,10);
    rect(284,190,10,10);
    rect(362,273,10,10);
    rect(380,273,10,10);
    rect(374,253,10,10);
    rect(389,252,10,10);
};
fill(255, 255, 255);
textAlign(LEFT, TOP);
textSize(20);
text("Ndoumbe and Milan's Game",169,30);
drawGlobe();
fill(255, 255, 255);
textSize(50);
text("JEOPARDY",181,186);
start.draw(); //Draws start button
};
/*** End Splash Screen Function ***/

/*** Function for Play Screen ***/
var playGame = function(){
    currentScene=1;
    background(46, 46, 158);
    stroke(0, 0, 0);
    rect(0,0,600,40);
    drawEmoji(120, 28, 30);
    drawBitmoji(339, -85, 70);
    fill(0, 0, 0);
    textSize(15);
    var seconds =  round((millis()- time)/1000);

    text("Time: "+ seconds, 48,10);
    text("Score: " + score, 525, 10);

    categories();
    
    for (var i = 0; i < tiles.length; i++) {
        tiles[i].draw();
        tiles[i].mouseHover();
    }
    
    if (flippedTiles.length === 16) {
        currentScene = 5;
    }
};
/*** End Function for Play Screen ***/

var question;
// Varibles a-d are for question options
var a;
var b;
var c;
var d;

/*** Function for Question Screen ***/
var questionScreen = function() {
    currentScene = 2;
    background(46, 46, 158);
    fill(255, 255, 255);
    rect(0, 0, 600, 40);
    stroke(255, 255, 255);
    fill(0, 0, 0);
    textSize(15);
    
    var seconds =  round((millis()- time)/1000);
    //Time tracker
    text("Time: "+ seconds, 48,10);
    text("Score: " + score, 500, 10);
    
    stroke(224, 133, 36);
    fill(224, 133, 36);
    textAlign(CENTER, CENTER);
    textSize(30);
    text(questions[k].question, 0, 100, 600, 100);
    textAlign(LEFT, CENTER);
    textSize(25);
    

    question = questions[k];
    
    // This loop draws each of the options for each question
    for (var i = 0; i < question.options.length; i++) {
        fill(46, 46, 158);
        rect(40, 240 + i*50, 425, 42);
        stroke(224, 133, 36);
        fill(224, 133, 36);
        text("- " + question.options[i], 40, 260 + i*50 );
        //Asigns each option of each question to the variables a-d
        a = questions[k].options[0];
        b = questions[k].options[1];
        c = questions[k].options[2];
        d = questions[k].options[3];
    }
};
/*** End Function for Question Screen ***/

/*** Correct Screen for correct guess ***/
var correctScreen = function() {
    currentScene = 3;
    background(0, 0, 0);
    fill(255, 255, 255);
    rect(0, 0, 600, 40);
    stroke(255, 255, 255);
    fill(0, 0, 0);
    textSize(15);
    var seconds =  round((millis()- time)/1000);

    text("Time: "+ seconds, 48,10);
    text("Score: " + score, 500, 10);
    
    textSize(100);
    textAlign(CENTER, CENTER);
    fill(255, 255, 255);
    text("CORRECT!!!", 300, 200);
    cont.draw(); //Draws continue screen
};
/*** End Correct Screen Function ***/

/*** Wrong Screen for wrong guess ***/
var wrongScreen = function() {
    currentScene = 4;
    background(0, 0, 0);
    fill(255, 255, 255);
    rect(0, 0, 600, 40);
    stroke(255, 255, 255);
    fill(0, 0, 0);
    textSize(15);
    var seconds =  round((millis()- time)/1000);

    text("Time: "+ seconds, 48,10);
    text("Score: " + score, 500, 10);
    
    textSize(100);
    textAlign(CENTER, CENTER);
    fill(255, 255, 255);
    text("WRONG!!!", 300, 200);
    cont.draw(); //Draw continue button
};
/*** End Wrong Screen Function ***/

/*** Function for End Screen ***/
var endScreen = function() {
    currentScene = 5;
    background(0, 149, 255);
    textAlign(CENTER, CENTER);
    textSize(60);
    text("Game Over", 300, 100);
    textSize(50);
    text("Your Final Score: " + score, 300, 250);
    text("Thank You for Playing!!!", 300, 400);
};
/*** End of End Screen Function ***/

/*** Function for when mouse is Clicked ***/
mouseClicked = function() {
    var tile;
    
    if (currentScene === 0) {
        start.handleMouseClick();
    } 

    else if (currentScene === 1) {
        // This for loop handles what happens when each tile is clicked
        for (var i = 0; i < tiles.length; i++) {
            tile = tiles[i];
            if (tile.isMouseWithin(mouseX, mouseY) && !tile.tileOpened) {
                currentScene = 2;
                
                //The tileOpened is a very important part of this because this makes sure each tile can only be clicked once regardless of clicked answer. 
                tile.tileOpened = true;
                
                flippedTiles.push(tile);
                k = i;
            }
        }
    }
    else if (currentScene === 2) {
        // This next part handles the clicking on each of the options
        
        // FOr option a
        if (mouseX >= 40 && mouseX <= 450 && mouseY >= 240 && mouseY <= 282) {
            // The varibles a-d refer back to the options. With a being the first and d being the last option. 
            // Then it check if that option is the same as the answer and if it is, award the points value of that question to the score. 
            if (a === questions[k].answer) {
                //Then if answer is correct brings you to correct screen
                currentScene = 3;
                score = score + questions[k].points;
            }
            else if (a !== questions[k].answer)
            {
                //Then if answer is wrong brings you to wrong screen
                currentScene = 4;
            }
        }
        
        // For option b
        else if (mouseX >= 40 && mouseX <= 450 && mouseY >= 290 && mouseY <= 332) {
            if (b === questions[k].answer) {
                currentScene = 3;
                score = score + questions[k].points;
            }
            else if (b !== questions[k].answer)
            {
                currentScene = 4;
            }
        }
        
        // For option c
        else if (mouseX >= 40 && mouseX <= 450 && mouseY >= 340 && mouseY <= 382) {
            if (c === questions[k].answer) {
                currentScene = 3;
                score = score + questions[k].points;
            }
            else if (c !== questions[k].answer)
            {
                currentScene = 4;
            }
        }
        
        // For option d
        else if (mouseX >= 40 && mouseX <= 450 && mouseY >= 390 && mouseY <= 432) {
            if (d === questions[k].answer) {
                currentScene = 3;
                score = score + questions[k].points;
            }
            else if (d !== questions[k].answer)
            {
                currentScene = 4;
            }
        }
    }
    else if (currentScene === 3 || currentScene === 4) {
        // If on correct or wrong screen, this calls the function that handles what to do when mouse is clicked. 
        cont.handleMouseClick();
    }
    else if (currentScene === 5) {
        home.handleMouseClick();
    }
};



//draw function to call different screens
draw = function() {
    if(currentScene === 0){splashScreen();}
    else if(currentScene === 1){playGame();}
    else if(currentScene === 2){questionScreen();}
    else if(currentScene === 3){correctScreen();}
    else if(currentScene === 4){wrongScreen();}
    else if(currentScene === 5){endScreen();}
};



 

